// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "array_mem_perform_array_mem_perform.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic array_mem_perform_array_mem_perform::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic array_mem_perform_array_mem_perform::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> array_mem_perform_array_mem_perform::ap_ST_fsm_state1 = "1";
const sc_lv<4> array_mem_perform_array_mem_perform::ap_ST_fsm_state2 = "10";
const sc_lv<4> array_mem_perform_array_mem_perform::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> array_mem_perform_array_mem_perform::ap_ST_fsm_state5 = "1000";
const sc_lv<32> array_mem_perform_array_mem_perform::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool array_mem_perform_array_mem_perform::ap_const_boolean_1 = true;
const sc_lv<32> array_mem_perform_array_mem_perform::ap_const_lv32_1 = "1";
const sc_lv<32> array_mem_perform_array_mem_perform::ap_const_lv32_2 = "10";
const bool array_mem_perform_array_mem_perform::ap_const_boolean_0 = false;
const sc_lv<1> array_mem_perform_array_mem_perform::ap_const_lv1_0 = "0";
const sc_lv<1> array_mem_perform_array_mem_perform::ap_const_lv1_1 = "1";
const sc_lv<8> array_mem_perform_array_mem_perform::ap_const_lv8_2 = "10";
const sc_lv<10> array_mem_perform_array_mem_perform::ap_const_lv10_0 = "0000000000";
const sc_lv<64> array_mem_perform_array_mem_perform::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> array_mem_perform_array_mem_perform::ap_const_lv64_1 = "1";
const sc_lv<8> array_mem_perform_array_mem_perform::ap_const_lv8_80 = "10000000";
const sc_lv<8> array_mem_perform_array_mem_perform::ap_const_lv8_1 = "1";
const sc_lv<32> array_mem_perform_array_mem_perform::ap_const_lv32_3 = "11";
const sc_lv<8> array_mem_perform_array_mem_perform::ap_const_lv8_0 = "00000000";

array_mem_perform_array_mem_perform::array_mem_perform_array_mem_perform(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln102_fu_143_p2);
    sensitive << ( i_reg_81 );

    SC_METHOD(thread_add_ln1307_1_fu_175_p2);
    sensitive << ( sext_ln169_2_fu_167_p1 );
    sensitive << ( sext_ln169_3_fu_171_p1 );

    SC_METHOD(thread_add_ln1307_fu_161_p2);
    sensitive << ( sext_ln169_fu_153_p1 );
    sensitive << ( sext_ln169_1_fu_157_p1 );

    SC_METHOD(thread_add_ln654_fu_185_p2);
    sensitive << ( sum_reg_92 );
    sensitive << ( sext_ln654_fu_181_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_flush_enable);
    sensitive << ( icmp_ln102_fu_132_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( sum_reg_92 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_ln102_fu_132_p2);
    sensitive << ( i_reg_81 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_mem_Addr_A);
    sensitive << ( mem_Addr_A_orig );

    SC_METHOD(thread_mem_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln98_fu_138_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_mem_Addr_B);
    sensitive << ( mem_addr_1_gep_fu_60_p3 );

    SC_METHOD(thread_mem_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_mem_Clk_B);
    sensitive << ( ap_clk );

    SC_METHOD(thread_mem_Din_A);

    SC_METHOD(thread_mem_Din_B);

    SC_METHOD(thread_mem_EN_A);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_mem_EN_B);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_mem_Rst_A);
    sensitive << ( ap_rst );

    SC_METHOD(thread_mem_Rst_B);
    sensitive << ( ap_rst );

    SC_METHOD(thread_mem_WEN_A);

    SC_METHOD(thread_mem_WEN_B);

    SC_METHOD(thread_mem_addr_1_gep_fu_60_p3);
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_sext_ln169_1_fu_157_p1);
    sensitive << ( empty_7_reg_113 );

    SC_METHOD(thread_sext_ln169_2_fu_167_p1);
    sensitive << ( add_ln1307_fu_161_p2 );

    SC_METHOD(thread_sext_ln169_3_fu_171_p1);
    sensitive << ( empty_reg_104 );

    SC_METHOD(thread_sext_ln169_fu_153_p1);
    sensitive << ( trunc_ln135_2_fu_149_p1 );

    SC_METHOD(thread_sext_ln654_fu_181_p1);
    sensitive << ( add_ln1307_1_fu_175_p2 );

    SC_METHOD(thread_trunc_ln135_1_fu_128_p1);
    sensitive << ( mem_Dout_B );

    SC_METHOD(thread_trunc_ln135_2_fu_149_p1);
    sensitive << ( mem_Dout_A );

    SC_METHOD(thread_trunc_ln135_fu_124_p1);
    sensitive << ( mem_Dout_A );

    SC_METHOD(thread_zext_ln98_fu_138_p1);
    sensitive << ( i_reg_81 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "array_mem_perform_array_mem_perform_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, mem_Addr_A, "(port)mem_Addr_A");
    sc_trace(mVcdFile, mem_EN_A, "(port)mem_EN_A");
    sc_trace(mVcdFile, mem_WEN_A, "(port)mem_WEN_A");
    sc_trace(mVcdFile, mem_Din_A, "(port)mem_Din_A");
    sc_trace(mVcdFile, mem_Dout_A, "(port)mem_Dout_A");
    sc_trace(mVcdFile, mem_Clk_A, "(port)mem_Clk_A");
    sc_trace(mVcdFile, mem_Rst_A, "(port)mem_Rst_A");
    sc_trace(mVcdFile, mem_Addr_B, "(port)mem_Addr_B");
    sc_trace(mVcdFile, mem_EN_B, "(port)mem_EN_B");
    sc_trace(mVcdFile, mem_WEN_B, "(port)mem_WEN_B");
    sc_trace(mVcdFile, mem_Din_B, "(port)mem_Din_B");
    sc_trace(mVcdFile, mem_Dout_B, "(port)mem_Dout_B");
    sc_trace(mVcdFile, mem_Clk_B, "(port)mem_Clk_B");
    sc_trace(mVcdFile, mem_Rst_B, "(port)mem_Rst_B");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_reg_81, "i_reg_81");
    sc_trace(mVcdFile, sum_reg_92, "sum_reg_92");
    sc_trace(mVcdFile, empty_reg_104, "empty_reg_104");
    sc_trace(mVcdFile, empty_7_reg_113, "empty_7_reg_113");
    sc_trace(mVcdFile, mem_addr_1_gep_fu_60_p3, "mem_addr_1_gep_fu_60_p3");
    sc_trace(mVcdFile, trunc_ln135_fu_124_p1, "trunc_ln135_fu_124_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln135_1_fu_128_p1, "trunc_ln135_1_fu_128_p1");
    sc_trace(mVcdFile, icmp_ln102_fu_132_p2, "icmp_ln102_fu_132_p2");
    sc_trace(mVcdFile, icmp_ln102_reg_211, "icmp_ln102_reg_211");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln102_fu_143_p2, "add_ln102_fu_143_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, trunc_ln135_2_fu_149_p1, "trunc_ln135_2_fu_149_p1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, add_ln654_fu_185_p2, "add_ln654_fu_185_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_flush_enable, "ap_condition_pp0_flush_enable");
    sc_trace(mVcdFile, zext_ln98_fu_138_p1, "zext_ln98_fu_138_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, mem_Addr_A_orig, "mem_Addr_A_orig");
    sc_trace(mVcdFile, sext_ln169_fu_153_p1, "sext_ln169_fu_153_p1");
    sc_trace(mVcdFile, sext_ln169_1_fu_157_p1, "sext_ln169_1_fu_157_p1");
    sc_trace(mVcdFile, add_ln1307_fu_161_p2, "add_ln1307_fu_161_p2");
    sc_trace(mVcdFile, sext_ln169_2_fu_167_p1, "sext_ln169_2_fu_167_p1");
    sc_trace(mVcdFile, sext_ln169_3_fu_171_p1, "sext_ln169_3_fu_171_p1");
    sc_trace(mVcdFile, add_ln1307_1_fu_175_p2, "add_ln1307_1_fu_175_p2");
    sc_trace(mVcdFile, sext_ln654_fu_181_p1, "sext_ln654_fu_181_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("array_mem_perform_array_mem_perform.hdltvin.dat");
    mHdltvoutHandle.open("array_mem_perform_array_mem_perform.hdltvout.dat");
}

array_mem_perform_array_mem_perform::~array_mem_perform_array_mem_perform() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void array_mem_perform_array_mem_perform::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_flush_enable.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_7_reg_113 = trunc_ln135_1_fu_128_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln102_reg_211.read(), ap_const_lv1_0))) {
        empty_7_reg_113 = trunc_ln135_2_fu_149_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_reg_104 = trunc_ln135_fu_124_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln102_reg_211.read(), ap_const_lv1_0))) {
        empty_reg_104 = empty_7_reg_113.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_81 = ap_const_lv8_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(icmp_ln102_fu_132_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_81 = add_ln102_fu_143_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sum_reg_92 = ap_const_lv10_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(icmp_ln102_reg_211.read(), ap_const_lv1_0))) {
        sum_reg_92 = add_ln654_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln102_reg_211 = icmp_ln102_fu_132_p2.read();
    }
}

void array_mem_perform_array_mem_perform::thread_add_ln102_fu_143_p2() {
    add_ln102_fu_143_p2 = (!ap_const_lv8_1.is_01() || !i_reg_81.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(i_reg_81.read()));
}

void array_mem_perform_array_mem_perform::thread_add_ln1307_1_fu_175_p2() {
    add_ln1307_1_fu_175_p2 = (!sext_ln169_2_fu_167_p1.read().is_01() || !sext_ln169_3_fu_171_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(sext_ln169_2_fu_167_p1.read()) + sc_bigint<9>(sext_ln169_3_fu_171_p1.read()));
}

void array_mem_perform_array_mem_perform::thread_add_ln1307_fu_161_p2() {
    add_ln1307_fu_161_p2 = (!sext_ln169_fu_153_p1.read().is_01() || !sext_ln169_1_fu_157_p1.read().is_01())? sc_lv<8>(): (sc_bigint<8>(sext_ln169_fu_153_p1.read()) + sc_bigint<8>(sext_ln169_1_fu_157_p1.read()));
}

void array_mem_perform_array_mem_perform::thread_add_ln654_fu_185_p2() {
    add_ln654_fu_185_p2 = (!sext_ln654_fu_181_p1.read().is_01() || !sum_reg_92.read().is_01())? sc_lv<10>(): (sc_bigint<10>(sext_ln654_fu_181_p1.read()) + sc_biguint<10>(sum_reg_92.read()));
}

void array_mem_perform_array_mem_perform::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void array_mem_perform_array_mem_perform::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void array_mem_perform_array_mem_perform::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void array_mem_perform_array_mem_perform::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void array_mem_perform_array_mem_perform::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void array_mem_perform_array_mem_perform::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void array_mem_perform_array_mem_perform::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void array_mem_perform_array_mem_perform::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void array_mem_perform_array_mem_perform::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void array_mem_perform_array_mem_perform::thread_ap_condition_pp0_flush_enable() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln102_fu_132_p2.read(), ap_const_lv1_1))) {
        ap_condition_pp0_flush_enable = ap_const_logic_1;
    } else {
        ap_condition_pp0_flush_enable = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void array_mem_perform_array_mem_perform::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_ap_return() {
    ap_return = sum_reg_92.read();
}

void array_mem_perform_array_mem_perform::thread_icmp_ln102_fu_132_p2() {
    icmp_ln102_fu_132_p2 = (!i_reg_81.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_81.read() == ap_const_lv8_80);
}

void array_mem_perform_array_mem_perform::thread_mem_Addr_A() {
    mem_Addr_A = (!ap_const_lv32_0.is_01())? sc_lv<32>(): mem_Addr_A_orig.read() << (unsigned short)ap_const_lv32_0.to_uint();
}

void array_mem_perform_array_mem_perform::thread_mem_Addr_A_orig() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        mem_Addr_A_orig =  (sc_lv<32>) (zext_ln98_fu_138_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        mem_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_0);
    } else {
        mem_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void array_mem_perform_array_mem_perform::thread_mem_Addr_B() {
    mem_Addr_B = (!ap_const_lv32_0.is_01())? sc_lv<32>(): mem_addr_1_gep_fu_60_p3.read() << (unsigned short)ap_const_lv32_0.to_uint();
}

void array_mem_perform_array_mem_perform::thread_mem_Clk_A() {
    mem_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void array_mem_perform_array_mem_perform::thread_mem_Clk_B() {
    mem_Clk_B = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void array_mem_perform_array_mem_perform::thread_mem_Din_A() {
    mem_Din_A = ap_const_lv8_0;
}

void array_mem_perform_array_mem_perform::thread_mem_Din_B() {
    mem_Din_B = ap_const_lv8_0;
}

void array_mem_perform_array_mem_perform::thread_mem_EN_A() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())))) {
        mem_EN_A = ap_const_logic_1;
    } else {
        mem_EN_A = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_mem_EN_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mem_EN_B = ap_const_logic_1;
    } else {
        mem_EN_B = ap_const_logic_0;
    }
}

void array_mem_perform_array_mem_perform::thread_mem_Rst_A() {
    mem_Rst_A = ap_rst.read();
}

void array_mem_perform_array_mem_perform::thread_mem_Rst_B() {
    mem_Rst_B = ap_rst.read();
}

void array_mem_perform_array_mem_perform::thread_mem_WEN_A() {
    mem_WEN_A = ap_const_lv1_0;
}

void array_mem_perform_array_mem_perform::thread_mem_WEN_B() {
    mem_WEN_B = ap_const_lv1_0;
}

void array_mem_perform_array_mem_perform::thread_mem_addr_1_gep_fu_60_p3() {
    mem_addr_1_gep_fu_60_p3 =  (sc_lv<32>) (ap_const_lv64_1);
}

void array_mem_perform_array_mem_perform::thread_sext_ln169_1_fu_157_p1() {
    sext_ln169_1_fu_157_p1 = esl_sext<8,7>(empty_7_reg_113.read());
}

void array_mem_perform_array_mem_perform::thread_sext_ln169_2_fu_167_p1() {
    sext_ln169_2_fu_167_p1 = esl_sext<9,8>(add_ln1307_fu_161_p2.read());
}

void array_mem_perform_array_mem_perform::thread_sext_ln169_3_fu_171_p1() {
    sext_ln169_3_fu_171_p1 = esl_sext<9,7>(empty_reg_104.read());
}

void array_mem_perform_array_mem_perform::thread_sext_ln169_fu_153_p1() {
    sext_ln169_fu_153_p1 = esl_sext<8,7>(trunc_ln135_2_fu_149_p1.read());
}

void array_mem_perform_array_mem_perform::thread_sext_ln654_fu_181_p1() {
    sext_ln654_fu_181_p1 = esl_sext<10,9>(add_ln1307_1_fu_175_p2.read());
}

void array_mem_perform_array_mem_perform::thread_trunc_ln135_1_fu_128_p1() {
    trunc_ln135_1_fu_128_p1 = mem_Dout_B.read().range(7-1, 0);
}

void array_mem_perform_array_mem_perform::thread_trunc_ln135_2_fu_149_p1() {
    trunc_ln135_2_fu_149_p1 = mem_Dout_A.read().range(7-1, 0);
}

void array_mem_perform_array_mem_perform::thread_trunc_ln135_fu_124_p1() {
    trunc_ln135_fu_124_p1 = mem_Dout_A.read().range(7-1, 0);
}

void array_mem_perform_array_mem_perform::thread_zext_ln98_fu_138_p1() {
    zext_ln98_fu_138_p1 = esl_zext<64,8>(i_reg_81.read());
}

void array_mem_perform_array_mem_perform::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

void array_mem_perform_array_mem_perform::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Addr_A\" :  \"" << mem_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_EN_A\" :  \"" << mem_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_WEN_A\" :  \"" << mem_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Din_A\" :  \"" << mem_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_Dout_A\" :  \"" << mem_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Clk_A\" :  \"" << mem_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Rst_A\" :  \"" << mem_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Addr_B\" :  \"" << mem_Addr_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_EN_B\" :  \"" << mem_EN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_WEN_B\" :  \"" << mem_WEN_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Din_B\" :  \"" << mem_Din_B.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mem_Dout_B\" :  \"" << mem_Dout_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Clk_B\" :  \"" << mem_Clk_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mem_Rst_B\" :  \"" << mem_Rst_B.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

