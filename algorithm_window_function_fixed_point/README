/*
 * Copyright 2019 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Example code for a fixed-point "window function" based on a template class.
 * This example demonstrates several Xilinx High Level Synthesis (HLS) C++
 * language support features, ehancements and coding style techniques including:
 * - C+ coding style for ROM inference - init functions must be global-scope
 * - use of <cmath> functions to init ROMs - no HW created by HLS
 * - use of the ap_fixed<> data type in both HLS and C++ functional modeling
 * - code reuse/parameterization via C++ templates
 * - top level wrapper function for HLS of class objets cand methods
 * - TCL directive syntax for a class member (see run_hls.tcl)
 * - namespaces to control visibility and prevent naming clashes
 */

Files Included in this Package
==================================================
window_fn_top.cpp  - top level wrapper function
window_fn_top.h    - top level header with function prototype, typedefs, etc
window_fn_class.h  - header file for window function class
window_fn_test.cpp - test program which for SW model validation & RTL co-sim
run_hls.tcl        - HLS run script
x_hls.tcl          - auxilary script setting run-level
README             - this file

Running the Design
=================================================
vitis_hls -f run_hls.tcl