// ==============================================================
// RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.0
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _array_mem_perform_array_mem_perform_HH_
#define _array_mem_perform_array_mem_perform_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct array_mem_perform_array_mem_perform : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > mem_Addr_A;
    sc_out< sc_logic > mem_EN_A;
    sc_out< sc_lv<1> > mem_WEN_A;
    sc_out< sc_lv<8> > mem_Din_A;
    sc_in< sc_lv<8> > mem_Dout_A;
    sc_out< sc_logic > mem_Clk_A;
    sc_out< sc_logic > mem_Rst_A;
    sc_out< sc_lv<32> > mem_Addr_B;
    sc_out< sc_logic > mem_EN_B;
    sc_out< sc_lv<1> > mem_WEN_B;
    sc_out< sc_lv<8> > mem_Din_B;
    sc_in< sc_lv<8> > mem_Dout_B;
    sc_out< sc_logic > mem_Clk_B;
    sc_out< sc_logic > mem_Rst_B;
    sc_out< sc_lv<10> > ap_return;


    // Module declarations
    array_mem_perform_array_mem_perform(sc_module_name name);
    SC_HAS_PROCESS(array_mem_perform_array_mem_perform);

    ~array_mem_perform_array_mem_perform();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > i_reg_81;
    sc_signal< sc_lv<10> > sum_reg_92;
    sc_signal< sc_lv<7> > empty_reg_104;
    sc_signal< sc_lv<7> > empty_7_reg_113;
    sc_signal< sc_lv<32> > mem_addr_1_gep_fu_60_p3;
    sc_signal< sc_lv<7> > trunc_ln135_fu_124_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > trunc_ln135_1_fu_128_p1;
    sc_signal< sc_lv<1> > icmp_ln102_fu_132_p2;
    sc_signal< sc_lv<1> > icmp_ln102_reg_211;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > add_ln102_fu_143_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<7> > trunc_ln135_2_fu_149_p1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<10> > add_ln654_fu_185_p2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_flush_enable;
    sc_signal< sc_lv<64> > zext_ln98_fu_138_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > mem_Addr_A_orig;
    sc_signal< sc_lv<8> > sext_ln169_fu_153_p1;
    sc_signal< sc_lv<8> > sext_ln169_1_fu_157_p1;
    sc_signal< sc_lv<8> > add_ln1307_fu_161_p2;
    sc_signal< sc_lv<9> > sext_ln169_2_fu_167_p1;
    sc_signal< sc_lv<9> > sext_ln169_3_fu_171_p1;
    sc_signal< sc_lv<9> > add_ln1307_1_fu_175_p2;
    sc_signal< sc_lv<10> > sext_ln654_fu_181_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln102_fu_143_p2();
    void thread_add_ln1307_1_fu_175_p2();
    void thread_add_ln1307_fu_161_p2();
    void thread_add_ln654_fu_185_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_flush_enable();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln102_fu_132_p2();
    void thread_mem_Addr_A();
    void thread_mem_Addr_A_orig();
    void thread_mem_Addr_B();
    void thread_mem_Clk_A();
    void thread_mem_Clk_B();
    void thread_mem_Din_A();
    void thread_mem_Din_B();
    void thread_mem_EN_A();
    void thread_mem_EN_B();
    void thread_mem_Rst_A();
    void thread_mem_Rst_B();
    void thread_mem_WEN_A();
    void thread_mem_WEN_B();
    void thread_mem_addr_1_gep_fu_60_p3();
    void thread_sext_ln169_1_fu_157_p1();
    void thread_sext_ln169_2_fu_167_p1();
    void thread_sext_ln169_3_fu_171_p1();
    void thread_sext_ln169_fu_153_p1();
    void thread_sext_ln654_fu_181_p1();
    void thread_trunc_ln135_1_fu_128_p1();
    void thread_trunc_ln135_2_fu_149_p1();
    void thread_trunc_ln135_fu_124_p1();
    void thread_zext_ln98_fu_138_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
