-- ==============================================================
-- RTL generated by Scout HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.0
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_mem_perform_array_mem_perform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mem_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    mem_EN_A : OUT STD_LOGIC;
    mem_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    mem_Clk_A : OUT STD_LOGIC;
    mem_Rst_A : OUT STD_LOGIC;
    mem_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    mem_EN_B : OUT STD_LOGIC;
    mem_WEN_B : OUT STD_LOGIC_VECTOR (0 downto 0);
    mem_Din_B : OUT STD_LOGIC_VECTOR (7 downto 0);
    mem_Dout_B : IN STD_LOGIC_VECTOR (7 downto 0);
    mem_Clk_B : OUT STD_LOGIC;
    mem_Rst_B : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of array_mem_perform_array_mem_perform is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_mem_perform_array_mem_perform,hls_ip_2019_2_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.586000,HLS_SYN_LAT=130,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=137,HLS_VERSION=2019_2_0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_81 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_92 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_104 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_7_reg_113 : STD_LOGIC_VECTOR (6 downto 0);
    signal mem_addr_1_gep_fu_60_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln135_fu_124_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln135_1_fu_128_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln102_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln102_fu_143_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln135_2_fu_149_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal add_ln654_fu_185_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal zext_ln98_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln169_fu_153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln169_1_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1307_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln169_2_fu_167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln169_3_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1307_1_fu_175_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln654_fu_181_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_7_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                empty_7_reg_113 <= trunc_ln135_1_fu_128_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln102_reg_211 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_7_reg_113 <= trunc_ln135_2_fu_149_p1;
            end if; 
        end if;
    end process;

    empty_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                empty_reg_104 <= trunc_ln135_fu_124_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln102_reg_211 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_reg_104 <= empty_7_reg_113;
            end if; 
        end if;
    end process;

    i_reg_81_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_81 <= ap_const_lv8_2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln102_fu_132_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_81 <= add_ln102_fu_143_p2;
            end if; 
        end if;
    end process;

    sum_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                sum_reg_92 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln102_reg_211 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_reg_92 <= add_ln654_fu_185_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln102_reg_211 <= icmp_ln102_fu_132_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln102_fu_143_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(i_reg_81));
    add_ln1307_1_fu_175_p2 <= std_logic_vector(signed(sext_ln169_2_fu_167_p1) + signed(sext_ln169_3_fu_171_p1));
    add_ln1307_fu_161_p2 <= std_logic_vector(signed(sext_ln169_fu_153_p1) + signed(sext_ln169_1_fu_157_p1));
    add_ln654_fu_185_p2 <= std_logic_vector(signed(sext_ln654_fu_181_p1) + signed(sum_reg_92));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln102_fu_132_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln102_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= sum_reg_92;
    icmp_ln102_fu_132_p2 <= "1" when (i_reg_81 = ap_const_lv8_80) else "0";
    mem_Addr_A <= std_logic_vector(shift_left(unsigned(mem_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    mem_Addr_A_orig_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln98_fu_138_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_Addr_A_orig <= zext_ln98_fu_138_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            mem_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
        else 
            mem_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    mem_Addr_B <= std_logic_vector(shift_left(unsigned(mem_addr_1_gep_fu_60_p3),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));
    mem_Clk_A <= ap_clk;
    mem_Clk_B <= ap_clk;
    mem_Din_A <= ap_const_lv8_0;
    mem_Din_B <= ap_const_lv8_0;

    mem_EN_A_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mem_EN_A <= ap_const_logic_1;
        else 
            mem_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    mem_EN_B_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_EN_B <= ap_const_logic_1;
        else 
            mem_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    mem_Rst_A <= ap_rst;
    mem_Rst_B <= ap_rst;
    mem_WEN_A <= ap_const_lv1_0;
    mem_WEN_B <= ap_const_lv1_0;
    mem_addr_1_gep_fu_60_p3 <= ap_const_lv64_1(32 - 1 downto 0);
        sext_ln169_1_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_7_reg_113),8));

        sext_ln169_2_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1307_fu_161_p2),9));

        sext_ln169_3_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(empty_reg_104),9));

        sext_ln169_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln135_2_fu_149_p1),8));

        sext_ln654_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1307_1_fu_175_p2),10));

    trunc_ln135_1_fu_128_p1 <= mem_Dout_B(7 - 1 downto 0);
    trunc_ln135_2_fu_149_p1 <= mem_Dout_A(7 - 1 downto 0);
    trunc_ln135_fu_124_p1 <= mem_Dout_A(7 - 1 downto 0);
    zext_ln98_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_81),64));
end behav;
